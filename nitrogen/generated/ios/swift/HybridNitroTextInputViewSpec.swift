///
/// HybridNitroTextInputViewSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridNitroTextInputViewSpec``
public protocol HybridNitroTextInputViewSpec_protocol: HybridObject, HybridView {
  // Properties
  var allowFontScaling: Bool? { get set }
  var autoCapitalize: AutoCapitalize? { get set }
  var autoComplete: AutoComplete? { get set }
  var autoCorrect: Bool? { get set }
  var autoFocus: Bool? { get set }
  var caretHidden: Bool? { get set }
  var clearButtonMode: ClearButtonMode? { get set }
  var clearTextOnFocus: Bool? { get set }
  var contextMenuHidden: Bool? { get set }
  var defaultValue: String? { get set }
  var editable: Bool? { get set }
  var enablesReturnKeyAutomatically: Bool? { get set }
  var keyboardType: KeyboardType? { get set }
  var keyboardAppearance: KeyboardAppearance? { get set }
  var maxFontSizeMultiplier: Double? { get set }
  var maxLength: Double? { get set }
  var multiline: Bool? { get set }
  var passwordRules: String? { get set }
  var placeholder: String? { get set }
  var textAlign: TextAlign? { get set }
  var placeholderTextColor: ProcessedColor? { get set }
  var returnKeyType: ReturnKeyType? { get set }
  var selection: TextSelection? { get set }
  var selectionColor: ProcessedColor? { get set }
  var secureTextEntry: Bool? { get set }
  var spellCheck: Bool? { get set }
  var selectTextOnFocus: Bool? { get set }
  var showSoftInputOnFocus: Bool? { get set }
  var smartInsertDelete: Bool? { get set }
  var submitBehavior: SubmitBehavior? { get set }
  var onFocused: (() -> Void)? { get set }
  var onBlurred: (() -> Void)? { get set }
  var onTextChanged: ((_ text: String) -> Void)? { get set }
  var onEditingEnded: ((_ text: String) -> Void)? { get set }
  var onEditingSubmitted: ((_ text: String) -> Void)? { get set }
  var onSelectionChanged: ((_ start: Double, _ end: Double) -> Void)? { get set }
  var onKeyPressed: ((_ key: String) -> Void)? { get set }
  var onTouchBegan: ((_ pageX: Double, _ pageY: Double, _ locationX: Double, _ locationY: Double, _ timestamp: Double) -> Void)? { get set }
  var onTouchEnded: ((_ pageX: Double, _ pageY: Double, _ locationX: Double, _ locationY: Double, _ timestamp: Double) -> Void)? { get set }
  var onInitialHeightMeasured: ((_ height: Double) -> Void)? { get set }

  // Methods
  
}

/// See ``HybridNitroTextInputViewSpec``
open class HybridNitroTextInputViewSpec_base {
  private weak var cxxWrapper: HybridNitroTextInputViewSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridNitroTextInputViewSpec_cxx {
  #if DEBUG
    guard self is HybridNitroTextInputViewSpec else {
      fatalError("`self` is not a `HybridNitroTextInputViewSpec`! Did you accidentally inherit from `HybridNitroTextInputViewSpec_base` instead of `HybridNitroTextInputViewSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridNitroTextInputViewSpec_cxx(self as! HybridNitroTextInputViewSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the NitroTextInputView HybridObject.
 * Implement this protocol to create Swift-based instances of NitroTextInputView.
 * ```swift
 * class HybridNitroTextInputView : HybridNitroTextInputViewSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridNitroTextInputViewSpec = HybridNitroTextInputViewSpec_protocol & HybridNitroTextInputViewSpec_base
