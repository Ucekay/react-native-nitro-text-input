///
/// HybridNitroTextInputViewSpec_cxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges HybridNitroTextInputViewSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
open class HybridNitroTextInputViewSpec_cxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::nitrotextinput::bridge::swift`)
   * from `NitroTextInput-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.nitrotextinput.bridge.swift

  /**
   * Holds an instance of the `HybridNitroTextInputViewSpec` Swift protocol.
   */
  private var __implementation: any HybridNitroTextInputViewSpec

  /**
   * Holds a weak pointer to the C++ class that wraps the Swift class.
   */
  private var __cxxPart: bridge.std__weak_ptr_HybridNitroTextInputViewSpec_

  /**
   * Create a new `HybridNitroTextInputViewSpec_cxx` that wraps the given `HybridNitroTextInputViewSpec`.
   * All properties and methods bridge to C++ types.
   */
  public init(_ implementation: any HybridNitroTextInputViewSpec) {
    self.__implementation = implementation
    self.__cxxPart = .init()
    /* no base class */
  }

  /**
   * Get the actual `HybridNitroTextInputViewSpec` instance this class wraps.
   */
  @inline(__always)
  public func getHybridNitroTextInputViewSpec() -> any HybridNitroTextInputViewSpec {
    return __implementation
  }

  /**
   * Casts this instance to a retained unsafe raw pointer.
   * This acquires one additional strong reference on the object!
   */
  public func toUnsafe() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(self).toOpaque()
  }

  /**
   * Casts an unsafe pointer to a `HybridNitroTextInputViewSpec_cxx`.
   * The pointer has to be a retained opaque `Unmanaged<HybridNitroTextInputViewSpec_cxx>`.
   * This removes one strong reference from the object!
   */
  public class func fromUnsafe(_ pointer: UnsafeMutableRawPointer) -> HybridNitroTextInputViewSpec_cxx {
    return Unmanaged<HybridNitroTextInputViewSpec_cxx>.fromOpaque(pointer).takeRetainedValue()
  }

  /**
   * Gets (or creates) the C++ part of this Hybrid Object.
   * The C++ part is a `std::shared_ptr<HybridNitroTextInputViewSpec>`.
   */
  public func getCxxPart() -> bridge.std__shared_ptr_HybridNitroTextInputViewSpec_ {
    let cachedCxxPart = self.__cxxPart.lock()
    if cachedCxxPart.__convertToBool() {
      return cachedCxxPart
    } else {
      let newCxxPart = bridge.create_std__shared_ptr_HybridNitroTextInputViewSpec_(self.toUnsafe())
      __cxxPart = bridge.weakify_std__shared_ptr_HybridNitroTextInputViewSpec_(newCxxPart)
      return newCxxPart
    }
  }

  

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  @inline(__always)
  public var memorySize: Int {
    return MemoryHelper.getSizeOf(self.__implementation) + self.__implementation.memorySize
  }

  /**
   * Call dispose() on the Swift class.
   * This _may_ be called manually from JS.
   */
  @inline(__always)
  public func dispose() {
    self.__implementation.dispose()
  }

  // Properties
  public final var allowFontScaling: bridge.std__optional_bool_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = self.__implementation.allowFontScaling {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.allowFontScaling = newValue.value
    }
  }
  
  public final var autoCapitalize: bridge.std__optional_AutoCapitalize_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_AutoCapitalize_ in
        if let __unwrappedValue = self.__implementation.autoCapitalize {
          return bridge.create_std__optional_AutoCapitalize_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.autoCapitalize = newValue.value
    }
  }
  
  public final var autoComplete: bridge.std__optional_AutoComplete_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_AutoComplete_ in
        if let __unwrappedValue = self.__implementation.autoComplete {
          return bridge.create_std__optional_AutoComplete_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.autoComplete = newValue.value
    }
  }
  
  public final var autoCorrect: bridge.std__optional_bool_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = self.__implementation.autoCorrect {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.autoCorrect = newValue.value
    }
  }
  
  public final var autoFocus: bridge.std__optional_bool_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = self.__implementation.autoFocus {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.autoFocus = newValue.value
    }
  }
  
  public final var caretHidden: bridge.std__optional_bool_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = self.__implementation.caretHidden {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.caretHidden = newValue.value
    }
  }
  
  public final var multiline: bridge.std__optional_bool_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = self.__implementation.multiline {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.multiline = newValue.value
    }
  }
  
  public final var placeholder: bridge.std__optional_std__string_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = self.__implementation.placeholder {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.placeholder = { () -> String? in
        if let __unwrapped = newValue.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var onInitialHeightMeasured: bridge.std__optional_std__function_void_double____height______ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__function_void_double____height______ in
        if let __unwrappedValue = self.__implementation.onInitialHeightMeasured {
          return bridge.create_std__optional_std__function_void_double____height______({ () -> bridge.Func_void_double in
            let __closureWrapper = Func_void_double(__unwrappedValue)
            return bridge.create_Func_void_double(__closureWrapper.toUnsafe())
          }())
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.onInitialHeightMeasured = { () -> ((_ height: Double) -> Void)? in
        if let __unwrapped = newValue.value {
          return { () -> (Double) -> Void in
            let __wrappedFunction = bridge.wrap_Func_void_double(__unwrapped)
            return { (__height: Double) -> Void in
              __wrappedFunction.call(__height)
            }
          }()
        } else {
          return nil
        }
      }()
    }
  }

  // Methods
  public final func getView() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(__implementation.view).toOpaque()
  }
  
  public final func beforeUpdate() {
    __implementation.beforeUpdate()
  }
  
  public final func afterUpdate() {
    __implementation.afterUpdate()
  }
}
