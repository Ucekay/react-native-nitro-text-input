///
/// NitroTextInput-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `AutoCapitalize` to properly resolve imports.
namespace margelo::nitro::nitrotextinput { enum class AutoCapitalize; }
// Forward declaration of `AutoComplete` to properly resolve imports.
namespace margelo::nitro::nitrotextinput { enum class AutoComplete; }
// Forward declaration of `ClearButtonMode` to properly resolve imports.
namespace margelo::nitro::nitrotextinput { enum class ClearButtonMode; }
// Forward declaration of `HybridNitroTextInputViewSpec` to properly resolve imports.
namespace margelo::nitro::nitrotextinput { class HybridNitroTextInputViewSpec; }
// Forward declaration of `KeyboardAppearance` to properly resolve imports.
namespace margelo::nitro::nitrotextinput { enum class KeyboardAppearance; }
// Forward declaration of `KeyboardType` to properly resolve imports.
namespace margelo::nitro::nitrotextinput { enum class KeyboardType; }
// Forward declaration of `ReturnKeyType` to properly resolve imports.
namespace margelo::nitro::nitrotextinput { enum class ReturnKeyType; }
// Forward declaration of `SubmitBehavior` to properly resolve imports.
namespace margelo::nitro::nitrotextinput { enum class SubmitBehavior; }
// Forward declaration of `TextSelection` to properly resolve imports.
namespace margelo::nitro::nitrotextinput { struct TextSelection; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridNitroTextInputViewSpec_cxx` to properly resolve imports.
namespace NitroTextInput { class HybridNitroTextInputViewSpec_cxx; }

// Include C++ defined types
#include "AutoCapitalize.hpp"
#include "AutoComplete.hpp"
#include "ClearButtonMode.hpp"
#include "HybridNitroTextInputViewSpec.hpp"
#include "KeyboardAppearance.hpp"
#include "KeyboardType.hpp"
#include "ReturnKeyType.hpp"
#include "SubmitBehavior.hpp"
#include "TextSelection.hpp"
#include <functional>
#include <memory>
#include <optional>
#include <string>
#include <variant>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::nitrotextinput::bridge::swift {

  // pragma MARK: std::optional<bool>
  /**
   * Specialized version of `std::optional<bool>`.
   */
  using std__optional_bool_ = std::optional<bool>;
  inline std::optional<bool> create_std__optional_bool_(const bool& value) {
    return std::optional<bool>(value);
  }
  
  // pragma MARK: std::optional<AutoCapitalize>
  /**
   * Specialized version of `std::optional<AutoCapitalize>`.
   */
  using std__optional_AutoCapitalize_ = std::optional<AutoCapitalize>;
  inline std::optional<AutoCapitalize> create_std__optional_AutoCapitalize_(const AutoCapitalize& value) {
    return std::optional<AutoCapitalize>(value);
  }
  
  // pragma MARK: std::optional<AutoComplete>
  /**
   * Specialized version of `std::optional<AutoComplete>`.
   */
  using std__optional_AutoComplete_ = std::optional<AutoComplete>;
  inline std::optional<AutoComplete> create_std__optional_AutoComplete_(const AutoComplete& value) {
    return std::optional<AutoComplete>(value);
  }
  
  // pragma MARK: std::optional<ClearButtonMode>
  /**
   * Specialized version of `std::optional<ClearButtonMode>`.
   */
  using std__optional_ClearButtonMode_ = std::optional<ClearButtonMode>;
  inline std::optional<ClearButtonMode> create_std__optional_ClearButtonMode_(const ClearButtonMode& value) {
    return std::optional<ClearButtonMode>(value);
  }
  
  // pragma MARK: std::optional<std::string>
  /**
   * Specialized version of `std::optional<std::string>`.
   */
  using std__optional_std__string_ = std::optional<std::string>;
  inline std::optional<std::string> create_std__optional_std__string_(const std::string& value) {
    return std::optional<std::string>(value);
  }
  
  // pragma MARK: std::optional<KeyboardType>
  /**
   * Specialized version of `std::optional<KeyboardType>`.
   */
  using std__optional_KeyboardType_ = std::optional<KeyboardType>;
  inline std::optional<KeyboardType> create_std__optional_KeyboardType_(const KeyboardType& value) {
    return std::optional<KeyboardType>(value);
  }
  
  // pragma MARK: std::optional<KeyboardAppearance>
  /**
   * Specialized version of `std::optional<KeyboardAppearance>`.
   */
  using std__optional_KeyboardAppearance_ = std::optional<KeyboardAppearance>;
  inline std::optional<KeyboardAppearance> create_std__optional_KeyboardAppearance_(const KeyboardAppearance& value) {
    return std::optional<KeyboardAppearance>(value);
  }
  
  // pragma MARK: std::optional<double>
  /**
   * Specialized version of `std::optional<double>`.
   */
  using std__optional_double_ = std::optional<double>;
  inline std::optional<double> create_std__optional_double_(const double& value) {
    return std::optional<double>(value);
  }
  
  // pragma MARK: std::variant<std::string, double>
  /**
   * Wrapper struct for `std::variant<std::string, double>`.
   * std::variant cannot be used in Swift because of a Swift bug.
   * Not even specializing it works. So we create a wrapper struct.
   */
  struct std__variant_std__string__double_ {
    std::variant<std::string, double> variant;
    std__variant_std__string__double_(std::variant<std::string, double> variant): variant(variant) { }
    operator std::variant<std::string, double>() const {
      return variant;
    }
    inline size_t index() const {
      return variant.index();
    }
    inline std::string get_0() const {
      return std::get<0>(variant);
    }
    inline double get_1() const {
      return std::get<1>(variant);
    }
  };
  inline std__variant_std__string__double_ create_std__variant_std__string__double_(const std::string& value) {
    return std__variant_std__string__double_(value);
  }
  inline std__variant_std__string__double_ create_std__variant_std__string__double_(double value) {
    return std__variant_std__string__double_(value);
  }
  
  // pragma MARK: std::optional<std::variant<std::string, double>>
  /**
   * Specialized version of `std::optional<std::variant<std::string, double>>`.
   */
  using std__optional_std__variant_std__string__double__ = std::optional<std::variant<std::string, double>>;
  inline std::optional<std::variant<std::string, double>> create_std__optional_std__variant_std__string__double__(const std::variant<std::string, double>& value) {
    return std::optional<std::variant<std::string, double>>(value);
  }
  
  // pragma MARK: std::optional<ReturnKeyType>
  /**
   * Specialized version of `std::optional<ReturnKeyType>`.
   */
  using std__optional_ReturnKeyType_ = std::optional<ReturnKeyType>;
  inline std::optional<ReturnKeyType> create_std__optional_ReturnKeyType_(const ReturnKeyType& value) {
    return std::optional<ReturnKeyType>(value);
  }
  
  // pragma MARK: std::optional<TextSelection>
  /**
   * Specialized version of `std::optional<TextSelection>`.
   */
  using std__optional_TextSelection_ = std::optional<TextSelection>;
  inline std::optional<TextSelection> create_std__optional_TextSelection_(const TextSelection& value) {
    return std::optional<TextSelection>(value);
  }
  
  // pragma MARK: std::optional<SubmitBehavior>
  /**
   * Specialized version of `std::optional<SubmitBehavior>`.
   */
  using std__optional_SubmitBehavior_ = std::optional<SubmitBehavior>;
  inline std::optional<SubmitBehavior> create_std__optional_SubmitBehavior_(const SubmitBehavior& value) {
    return std::optional<SubmitBehavior>(value);
  }
  
  // pragma MARK: std::function<void()>
  /**
   * Specialized version of `std::function<void()>`.
   */
  using Func_void = std::function<void()>;
  /**
   * Wrapper class for a `std::function<void()>`, this can be used from Swift.
   */
  class Func_void_Wrapper final {
  public:
    explicit Func_void_Wrapper(std::function<void()>&& func): _function(std::make_unique<std::function<void()>>(std::move(func))) {}
    inline void call() const {
      _function->operator()();
    }
  private:
    std::unique_ptr<std::function<void()>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void create_Func_void(void* _Nonnull swiftClosureWrapper);
  inline Func_void_Wrapper wrap_Func_void(Func_void value) {
    return Func_void_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<std::function<void()>>
  /**
   * Specialized version of `std::optional<std::function<void()>>`.
   */
  using std__optional_std__function_void____ = std::optional<std::function<void()>>;
  inline std::optional<std::function<void()>> create_std__optional_std__function_void____(const std::function<void()>& value) {
    return std::optional<std::function<void()>>(value);
  }
  
  // pragma MARK: std::function<void(const std::string& /* text */)>
  /**
   * Specialized version of `std::function<void(const std::string&)>`.
   */
  using Func_void_std__string = std::function<void(const std::string& /* text */)>;
  /**
   * Wrapper class for a `std::function<void(const std::string& / * text * /)>`, this can be used from Swift.
   */
  class Func_void_std__string_Wrapper final {
  public:
    explicit Func_void_std__string_Wrapper(std::function<void(const std::string& /* text */)>&& func): _function(std::make_unique<std::function<void(const std::string& /* text */)>>(std::move(func))) {}
    inline void call(std::string text) const {
      _function->operator()(text);
    }
  private:
    std::unique_ptr<std::function<void(const std::string& /* text */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_std__string create_Func_void_std__string(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__string_Wrapper wrap_Func_void_std__string(Func_void_std__string value) {
    return Func_void_std__string_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<std::function<void(const std::string& /* text */)>>
  /**
   * Specialized version of `std::optional<std::function<void(const std::string& / * text * /)>>`.
   */
  using std__optional_std__function_void_const_std__string_____text______ = std::optional<std::function<void(const std::string& /* text */)>>;
  inline std::optional<std::function<void(const std::string& /* text */)>> create_std__optional_std__function_void_const_std__string_____text______(const std::function<void(const std::string& /* text */)>& value) {
    return std::optional<std::function<void(const std::string& /* text */)>>(value);
  }
  
  // pragma MARK: std::function<void(double /* start */, double /* end */)>
  /**
   * Specialized version of `std::function<void(double, double)>`.
   */
  using Func_void_double_double = std::function<void(double /* start */, double /* end */)>;
  /**
   * Wrapper class for a `std::function<void(double / * start * /, double / * end * /)>`, this can be used from Swift.
   */
  class Func_void_double_double_Wrapper final {
  public:
    explicit Func_void_double_double_Wrapper(std::function<void(double /* start */, double /* end */)>&& func): _function(std::make_unique<std::function<void(double /* start */, double /* end */)>>(std::move(func))) {}
    inline void call(double start, double end) const {
      _function->operator()(start, end);
    }
  private:
    std::unique_ptr<std::function<void(double /* start */, double /* end */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_double_double create_Func_void_double_double(void* _Nonnull swiftClosureWrapper);
  inline Func_void_double_double_Wrapper wrap_Func_void_double_double(Func_void_double_double value) {
    return Func_void_double_double_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<std::function<void(double /* start */, double /* end */)>>
  /**
   * Specialized version of `std::optional<std::function<void(double / * start * /, double / * end * /)>>`.
   */
  using std__optional_std__function_void_double____start_____double____end______ = std::optional<std::function<void(double /* start */, double /* end */)>>;
  inline std::optional<std::function<void(double /* start */, double /* end */)>> create_std__optional_std__function_void_double____start_____double____end______(const std::function<void(double /* start */, double /* end */)>& value) {
    return std::optional<std::function<void(double /* start */, double /* end */)>>(value);
  }
  
  // pragma MARK: std::optional<std::function<void(const std::string& /* key */)>>
  /**
   * Specialized version of `std::optional<std::function<void(const std::string& / * key * /)>>`.
   */
  using std__optional_std__function_void_const_std__string_____key______ = std::optional<std::function<void(const std::string& /* key */)>>;
  inline std::optional<std::function<void(const std::string& /* key */)>> create_std__optional_std__function_void_const_std__string_____key______(const std::function<void(const std::string& /* key */)>& value) {
    return std::optional<std::function<void(const std::string& /* key */)>>(value);
  }
  
  // pragma MARK: std::function<void(double /* pageX */, double /* pageY */, double /* locationX */, double /* locationY */, double /* timestamp */)>
  /**
   * Specialized version of `std::function<void(double, double, double, double, double)>`.
   */
  using Func_void_double_double_double_double_double = std::function<void(double /* pageX */, double /* pageY */, double /* locationX */, double /* locationY */, double /* timestamp */)>;
  /**
   * Wrapper class for a `std::function<void(double / * pageX * /, double / * pageY * /, double / * locationX * /, double / * locationY * /, double / * timestamp * /)>`, this can be used from Swift.
   */
  class Func_void_double_double_double_double_double_Wrapper final {
  public:
    explicit Func_void_double_double_double_double_double_Wrapper(std::function<void(double /* pageX */, double /* pageY */, double /* locationX */, double /* locationY */, double /* timestamp */)>&& func): _function(std::make_unique<std::function<void(double /* pageX */, double /* pageY */, double /* locationX */, double /* locationY */, double /* timestamp */)>>(std::move(func))) {}
    inline void call(double pageX, double pageY, double locationX, double locationY, double timestamp) const {
      _function->operator()(pageX, pageY, locationX, locationY, timestamp);
    }
  private:
    std::unique_ptr<std::function<void(double /* pageX */, double /* pageY */, double /* locationX */, double /* locationY */, double /* timestamp */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_double_double_double_double_double create_Func_void_double_double_double_double_double(void* _Nonnull swiftClosureWrapper);
  inline Func_void_double_double_double_double_double_Wrapper wrap_Func_void_double_double_double_double_double(Func_void_double_double_double_double_double value) {
    return Func_void_double_double_double_double_double_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<std::function<void(double /* pageX */, double /* pageY */, double /* locationX */, double /* locationY */, double /* timestamp */)>>
  /**
   * Specialized version of `std::optional<std::function<void(double / * pageX * /, double / * pageY * /, double / * locationX * /, double / * locationY * /, double / * timestamp * /)>>`.
   */
  using std__optional_std__function_void_double____pageX_____double____pageY_____double____locationX_____double____locationY_____double____timestamp______ = std::optional<std::function<void(double /* pageX */, double /* pageY */, double /* locationX */, double /* locationY */, double /* timestamp */)>>;
  inline std::optional<std::function<void(double /* pageX */, double /* pageY */, double /* locationX */, double /* locationY */, double /* timestamp */)>> create_std__optional_std__function_void_double____pageX_____double____pageY_____double____locationX_____double____locationY_____double____timestamp______(const std::function<void(double /* pageX */, double /* pageY */, double /* locationX */, double /* locationY */, double /* timestamp */)>& value) {
    return std::optional<std::function<void(double /* pageX */, double /* pageY */, double /* locationX */, double /* locationY */, double /* timestamp */)>>(value);
  }
  
  // pragma MARK: std::function<void(double /* height */)>
  /**
   * Specialized version of `std::function<void(double)>`.
   */
  using Func_void_double = std::function<void(double /* height */)>;
  /**
   * Wrapper class for a `std::function<void(double / * height * /)>`, this can be used from Swift.
   */
  class Func_void_double_Wrapper final {
  public:
    explicit Func_void_double_Wrapper(std::function<void(double /* height */)>&& func): _function(std::make_unique<std::function<void(double /* height */)>>(std::move(func))) {}
    inline void call(double height) const {
      _function->operator()(height);
    }
  private:
    std::unique_ptr<std::function<void(double /* height */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_double create_Func_void_double(void* _Nonnull swiftClosureWrapper);
  inline Func_void_double_Wrapper wrap_Func_void_double(Func_void_double value) {
    return Func_void_double_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<std::function<void(double /* height */)>>
  /**
   * Specialized version of `std::optional<std::function<void(double / * height * /)>>`.
   */
  using std__optional_std__function_void_double____height______ = std::optional<std::function<void(double /* height */)>>;
  inline std::optional<std::function<void(double /* height */)>> create_std__optional_std__function_void_double____height______(const std::function<void(double /* height */)>& value) {
    return std::optional<std::function<void(double /* height */)>>(value);
  }
  
  // pragma MARK: std::shared_ptr<HybridNitroTextInputViewSpec>
  /**
   * Specialized version of `std::shared_ptr<HybridNitroTextInputViewSpec>`.
   */
  using std__shared_ptr_HybridNitroTextInputViewSpec_ = std::shared_ptr<HybridNitroTextInputViewSpec>;
  std::shared_ptr<HybridNitroTextInputViewSpec> create_std__shared_ptr_HybridNitroTextInputViewSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_HybridNitroTextInputViewSpec_(std__shared_ptr_HybridNitroTextInputViewSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<HybridNitroTextInputViewSpec>
  using std__weak_ptr_HybridNitroTextInputViewSpec_ = std::weak_ptr<HybridNitroTextInputViewSpec>;
  inline std__weak_ptr_HybridNitroTextInputViewSpec_ weakify_std__shared_ptr_HybridNitroTextInputViewSpec_(const std::shared_ptr<HybridNitroTextInputViewSpec>& strong) { return strong; }

} // namespace margelo::nitro::nitrotextinput::bridge::swift
