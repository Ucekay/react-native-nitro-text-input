///
/// HybridNitroTextInputViewSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNitroTextInputViewSpec.hpp"

// Forward declaration of `HybridNitroTextInputViewSpec_cxx` to properly resolve imports.
namespace NitroTextInput { class HybridNitroTextInputViewSpec_cxx; }

// Forward declaration of `AutoCapitalize` to properly resolve imports.
namespace margelo::nitro::nitrotextinput { enum class AutoCapitalize; }
// Forward declaration of `AutoComplete` to properly resolve imports.
namespace margelo::nitro::nitrotextinput { enum class AutoComplete; }
// Forward declaration of `ClearButtonMode` to properly resolve imports.
namespace margelo::nitro::nitrotextinput { enum class ClearButtonMode; }

#include <optional>
#include "AutoCapitalize.hpp"
#include "AutoComplete.hpp"
#include "ClearButtonMode.hpp"
#include <string>
#include <functional>

#include "NitroTextInput-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitrotextinput {

  /**
   * The C++ part of HybridNitroTextInputViewSpec_cxx.swift.
   *
   * HybridNitroTextInputViewSpecSwift (C++) accesses HybridNitroTextInputViewSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNitroTextInputViewSpec_cxx can directly inherit from the C++ class HybridNitroTextInputViewSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNitroTextInputViewSpecSwift: public virtual HybridNitroTextInputViewSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNitroTextInputViewSpecSwift(const NitroTextInput::HybridNitroTextInputViewSpec_cxx& swiftPart):
      HybridObject(HybridNitroTextInputViewSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroTextInput::HybridNitroTextInputViewSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    inline std::optional<bool> getAllowFontScaling() noexcept override {
      auto __result = _swiftPart.getAllowFontScaling();
      return __result;
    }
    inline void setAllowFontScaling(std::optional<bool> allowFontScaling) noexcept override {
      _swiftPart.setAllowFontScaling(allowFontScaling);
    }
    inline std::optional<AutoCapitalize> getAutoCapitalize() noexcept override {
      auto __result = _swiftPart.getAutoCapitalize();
      return __result;
    }
    inline void setAutoCapitalize(std::optional<AutoCapitalize> autoCapitalize) noexcept override {
      _swiftPart.setAutoCapitalize(autoCapitalize);
    }
    inline std::optional<AutoComplete> getAutoComplete() noexcept override {
      auto __result = _swiftPart.getAutoComplete();
      return __result;
    }
    inline void setAutoComplete(std::optional<AutoComplete> autoComplete) noexcept override {
      _swiftPart.setAutoComplete(autoComplete);
    }
    inline std::optional<bool> getAutoCorrect() noexcept override {
      auto __result = _swiftPart.getAutoCorrect();
      return __result;
    }
    inline void setAutoCorrect(std::optional<bool> autoCorrect) noexcept override {
      _swiftPart.setAutoCorrect(autoCorrect);
    }
    inline std::optional<bool> getAutoFocus() noexcept override {
      auto __result = _swiftPart.getAutoFocus();
      return __result;
    }
    inline void setAutoFocus(std::optional<bool> autoFocus) noexcept override {
      _swiftPart.setAutoFocus(autoFocus);
    }
    inline std::optional<bool> getCaretHidden() noexcept override {
      auto __result = _swiftPart.getCaretHidden();
      return __result;
    }
    inline void setCaretHidden(std::optional<bool> caretHidden) noexcept override {
      _swiftPart.setCaretHidden(caretHidden);
    }
    inline std::optional<ClearButtonMode> getClearButtonMode() noexcept override {
      auto __result = _swiftPart.getClearButtonMode();
      return __result;
    }
    inline void setClearButtonMode(std::optional<ClearButtonMode> clearButtonMode) noexcept override {
      _swiftPart.setClearButtonMode(clearButtonMode);
    }
    inline std::optional<bool> getMultiline() noexcept override {
      auto __result = _swiftPart.getMultiline();
      return __result;
    }
    inline void setMultiline(std::optional<bool> multiline) noexcept override {
      _swiftPart.setMultiline(multiline);
    }
    inline std::optional<std::string> getPlaceholder() noexcept override {
      auto __result = _swiftPart.getPlaceholder();
      return __result;
    }
    inline void setPlaceholder(const std::optional<std::string>& placeholder) noexcept override {
      _swiftPart.setPlaceholder(placeholder);
    }
    inline std::optional<std::function<void(double /* height */)>> getOnInitialHeightMeasured() noexcept override {
      auto __result = _swiftPart.getOnInitialHeightMeasured();
      return __result;
    }
    inline void setOnInitialHeightMeasured(const std::optional<std::function<void(double /* height */)>>& onInitialHeightMeasured) noexcept override {
      _swiftPart.setOnInitialHeightMeasured(onInitialHeightMeasured);
    }

  public:
    // Methods
    

  private:
    NitroTextInput::HybridNitroTextInputViewSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitrotextinput
