///
/// ReturnKeyType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::nitrotextinput {

  /**
   * An enum which can be represented as a JavaScript union (ReturnKeyType).
   */
  enum class ReturnKeyType {
    DEFAULT      SWIFT_NAME(default) = 0,
    GO      SWIFT_NAME(go) = 1,
    GOOGLE      SWIFT_NAME(google) = 2,
    JOIN      SWIFT_NAME(join) = 3,
    NEXT      SWIFT_NAME(next) = 4,
    ROUTE      SWIFT_NAME(route) = 5,
    SEARCH      SWIFT_NAME(search) = 6,
    SEND      SWIFT_NAME(send) = 7,
    YAHOO      SWIFT_NAME(yahoo) = 8,
    DONE      SWIFT_NAME(done) = 9,
    EMERGENCY_CALL      SWIFT_NAME(emergencyCall) = 10,
    CONTINUE      SWIFT_NAME(continue) = 11,
  } CLOSED_ENUM;

} // namespace margelo::nitro::nitrotextinput

namespace margelo::nitro {

  // C++ ReturnKeyType <> JS ReturnKeyType (union)
  template <>
  struct JSIConverter<margelo::nitro::nitrotextinput::ReturnKeyType> final {
    static inline margelo::nitro::nitrotextinput::ReturnKeyType fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("default"): return margelo::nitro::nitrotextinput::ReturnKeyType::DEFAULT;
        case hashString("go"): return margelo::nitro::nitrotextinput::ReturnKeyType::GO;
        case hashString("google"): return margelo::nitro::nitrotextinput::ReturnKeyType::GOOGLE;
        case hashString("join"): return margelo::nitro::nitrotextinput::ReturnKeyType::JOIN;
        case hashString("next"): return margelo::nitro::nitrotextinput::ReturnKeyType::NEXT;
        case hashString("route"): return margelo::nitro::nitrotextinput::ReturnKeyType::ROUTE;
        case hashString("search"): return margelo::nitro::nitrotextinput::ReturnKeyType::SEARCH;
        case hashString("send"): return margelo::nitro::nitrotextinput::ReturnKeyType::SEND;
        case hashString("yahoo"): return margelo::nitro::nitrotextinput::ReturnKeyType::YAHOO;
        case hashString("done"): return margelo::nitro::nitrotextinput::ReturnKeyType::DONE;
        case hashString("emergency-call"): return margelo::nitro::nitrotextinput::ReturnKeyType::EMERGENCY_CALL;
        case hashString("continue"): return margelo::nitro::nitrotextinput::ReturnKeyType::CONTINUE;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum ReturnKeyType - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, margelo::nitro::nitrotextinput::ReturnKeyType arg) {
      switch (arg) {
        case margelo::nitro::nitrotextinput::ReturnKeyType::DEFAULT: return JSIConverter<std::string>::toJSI(runtime, "default");
        case margelo::nitro::nitrotextinput::ReturnKeyType::GO: return JSIConverter<std::string>::toJSI(runtime, "go");
        case margelo::nitro::nitrotextinput::ReturnKeyType::GOOGLE: return JSIConverter<std::string>::toJSI(runtime, "google");
        case margelo::nitro::nitrotextinput::ReturnKeyType::JOIN: return JSIConverter<std::string>::toJSI(runtime, "join");
        case margelo::nitro::nitrotextinput::ReturnKeyType::NEXT: return JSIConverter<std::string>::toJSI(runtime, "next");
        case margelo::nitro::nitrotextinput::ReturnKeyType::ROUTE: return JSIConverter<std::string>::toJSI(runtime, "route");
        case margelo::nitro::nitrotextinput::ReturnKeyType::SEARCH: return JSIConverter<std::string>::toJSI(runtime, "search");
        case margelo::nitro::nitrotextinput::ReturnKeyType::SEND: return JSIConverter<std::string>::toJSI(runtime, "send");
        case margelo::nitro::nitrotextinput::ReturnKeyType::YAHOO: return JSIConverter<std::string>::toJSI(runtime, "yahoo");
        case margelo::nitro::nitrotextinput::ReturnKeyType::DONE: return JSIConverter<std::string>::toJSI(runtime, "done");
        case margelo::nitro::nitrotextinput::ReturnKeyType::EMERGENCY_CALL: return JSIConverter<std::string>::toJSI(runtime, "emergency-call");
        case margelo::nitro::nitrotextinput::ReturnKeyType::CONTINUE: return JSIConverter<std::string>::toJSI(runtime, "continue");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert ReturnKeyType to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("default"):
        case hashString("go"):
        case hashString("google"):
        case hashString("join"):
        case hashString("next"):
        case hashString("route"):
        case hashString("search"):
        case hashString("send"):
        case hashString("yahoo"):
        case hashString("done"):
        case hashString("emergency-call"):
        case hashString("continue"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
