///
/// HybridNitroTextInputViewSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `AutoCapitalize` to properly resolve imports.
namespace margelo::nitro::nitrotextinput { enum class AutoCapitalize; }
// Forward declaration of `AutoComplete` to properly resolve imports.
namespace margelo::nitro::nitrotextinput { enum class AutoComplete; }

#include <optional>
#include "AutoCapitalize.hpp"
#include "AutoComplete.hpp"
#include <string>
#include <functional>

namespace margelo::nitro::nitrotextinput {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `NitroTextInputView`
   * Inherit this class to create instances of `HybridNitroTextInputViewSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridNitroTextInputView: public HybridNitroTextInputViewSpec {
   * public:
   *   HybridNitroTextInputView(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridNitroTextInputViewSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridNitroTextInputViewSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridNitroTextInputViewSpec() override = default;

    public:
      // Properties
      virtual std::optional<bool> getAllowFontScaling() = 0;
      virtual void setAllowFontScaling(std::optional<bool> allowFontScaling) = 0;
      virtual std::optional<AutoCapitalize> getAutoCapitalize() = 0;
      virtual void setAutoCapitalize(std::optional<AutoCapitalize> autoCapitalize) = 0;
      virtual std::optional<AutoComplete> getAutoComplete() = 0;
      virtual void setAutoComplete(std::optional<AutoComplete> autoComplete) = 0;
      virtual std::optional<bool> getAutoCorrect() = 0;
      virtual void setAutoCorrect(std::optional<bool> autoCorrect) = 0;
      virtual std::optional<bool> getMultiline() = 0;
      virtual void setMultiline(std::optional<bool> multiline) = 0;
      virtual std::optional<std::string> getPlaceholder() = 0;
      virtual void setPlaceholder(const std::optional<std::string>& placeholder) = 0;
      virtual std::optional<std::function<void(double /* height */)>> getOnInitialHeightMeasured() = 0;
      virtual void setOnInitialHeightMeasured(const std::optional<std::function<void(double /* height */)>>& onInitialHeightMeasured) = 0;

    public:
      // Methods
      

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "NitroTextInputView";
  };

} // namespace margelo::nitro::nitrotextinput
