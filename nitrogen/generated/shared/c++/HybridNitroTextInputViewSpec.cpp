///
/// HybridNitroTextInputViewSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridNitroTextInputViewSpec.hpp"

namespace margelo::nitro::nitrotextinput {

  void HybridNitroTextInputViewSpec::loadHybridMethods() {
    // load base methods/properties
    HybridObject::loadHybridMethods();
    // load custom methods/properties
    registerHybrids(this, [](Prototype& prototype) {
      prototype.registerHybridGetter("allowFontScaling", &HybridNitroTextInputViewSpec::getAllowFontScaling);
      prototype.registerHybridSetter("allowFontScaling", &HybridNitroTextInputViewSpec::setAllowFontScaling);
      prototype.registerHybridGetter("autoCapitalize", &HybridNitroTextInputViewSpec::getAutoCapitalize);
      prototype.registerHybridSetter("autoCapitalize", &HybridNitroTextInputViewSpec::setAutoCapitalize);
      prototype.registerHybridGetter("autoComplete", &HybridNitroTextInputViewSpec::getAutoComplete);
      prototype.registerHybridSetter("autoComplete", &HybridNitroTextInputViewSpec::setAutoComplete);
      prototype.registerHybridGetter("autoCorrect", &HybridNitroTextInputViewSpec::getAutoCorrect);
      prototype.registerHybridSetter("autoCorrect", &HybridNitroTextInputViewSpec::setAutoCorrect);
      prototype.registerHybridGetter("autoFocus", &HybridNitroTextInputViewSpec::getAutoFocus);
      prototype.registerHybridSetter("autoFocus", &HybridNitroTextInputViewSpec::setAutoFocus);
      prototype.registerHybridGetter("caretHidden", &HybridNitroTextInputViewSpec::getCaretHidden);
      prototype.registerHybridSetter("caretHidden", &HybridNitroTextInputViewSpec::setCaretHidden);
      prototype.registerHybridGetter("clearButtonMode", &HybridNitroTextInputViewSpec::getClearButtonMode);
      prototype.registerHybridSetter("clearButtonMode", &HybridNitroTextInputViewSpec::setClearButtonMode);
      prototype.registerHybridGetter("clearTextOnFocus", &HybridNitroTextInputViewSpec::getClearTextOnFocus);
      prototype.registerHybridSetter("clearTextOnFocus", &HybridNitroTextInputViewSpec::setClearTextOnFocus);
      prototype.registerHybridGetter("contextMenuHidden", &HybridNitroTextInputViewSpec::getContextMenuHidden);
      prototype.registerHybridSetter("contextMenuHidden", &HybridNitroTextInputViewSpec::setContextMenuHidden);
      prototype.registerHybridGetter("defaultValue", &HybridNitroTextInputViewSpec::getDefaultValue);
      prototype.registerHybridSetter("defaultValue", &HybridNitroTextInputViewSpec::setDefaultValue);
      prototype.registerHybridGetter("editable", &HybridNitroTextInputViewSpec::getEditable);
      prototype.registerHybridSetter("editable", &HybridNitroTextInputViewSpec::setEditable);
      prototype.registerHybridGetter("enablesReturnKeyAutomatically", &HybridNitroTextInputViewSpec::getEnablesReturnKeyAutomatically);
      prototype.registerHybridSetter("enablesReturnKeyAutomatically", &HybridNitroTextInputViewSpec::setEnablesReturnKeyAutomatically);
      prototype.registerHybridGetter("enterKeyHint", &HybridNitroTextInputViewSpec::getEnterKeyHint);
      prototype.registerHybridSetter("enterKeyHint", &HybridNitroTextInputViewSpec::setEnterKeyHint);
      prototype.registerHybridGetter("keyboardType", &HybridNitroTextInputViewSpec::getKeyboardType);
      prototype.registerHybridSetter("keyboardType", &HybridNitroTextInputViewSpec::setKeyboardType);
      prototype.registerHybridGetter("maxFontSizeMultiplier", &HybridNitroTextInputViewSpec::getMaxFontSizeMultiplier);
      prototype.registerHybridSetter("maxFontSizeMultiplier", &HybridNitroTextInputViewSpec::setMaxFontSizeMultiplier);
      prototype.registerHybridGetter("maxLength", &HybridNitroTextInputViewSpec::getMaxLength);
      prototype.registerHybridSetter("maxLength", &HybridNitroTextInputViewSpec::setMaxLength);
      prototype.registerHybridGetter("multiline", &HybridNitroTextInputViewSpec::getMultiline);
      prototype.registerHybridSetter("multiline", &HybridNitroTextInputViewSpec::setMultiline);
      prototype.registerHybridGetter("placeholder", &HybridNitroTextInputViewSpec::getPlaceholder);
      prototype.registerHybridSetter("placeholder", &HybridNitroTextInputViewSpec::setPlaceholder);
      prototype.registerHybridGetter("onFocused", &HybridNitroTextInputViewSpec::getOnFocused);
      prototype.registerHybridSetter("onFocused", &HybridNitroTextInputViewSpec::setOnFocused);
      prototype.registerHybridGetter("onBlurred", &HybridNitroTextInputViewSpec::getOnBlurred);
      prototype.registerHybridSetter("onBlurred", &HybridNitroTextInputViewSpec::setOnBlurred);
      prototype.registerHybridGetter("onTextChanged", &HybridNitroTextInputViewSpec::getOnTextChanged);
      prototype.registerHybridSetter("onTextChanged", &HybridNitroTextInputViewSpec::setOnTextChanged);
      prototype.registerHybridGetter("onEditingEnded", &HybridNitroTextInputViewSpec::getOnEditingEnded);
      prototype.registerHybridSetter("onEditingEnded", &HybridNitroTextInputViewSpec::setOnEditingEnded);
      prototype.registerHybridGetter("onTouchBegan", &HybridNitroTextInputViewSpec::getOnTouchBegan);
      prototype.registerHybridSetter("onTouchBegan", &HybridNitroTextInputViewSpec::setOnTouchBegan);
      prototype.registerHybridGetter("onTouchEnded", &HybridNitroTextInputViewSpec::getOnTouchEnded);
      prototype.registerHybridSetter("onTouchEnded", &HybridNitroTextInputViewSpec::setOnTouchEnded);
      prototype.registerHybridGetter("onInitialHeightMeasured", &HybridNitroTextInputViewSpec::getOnInitialHeightMeasured);
      prototype.registerHybridSetter("onInitialHeightMeasured", &HybridNitroTextInputViewSpec::setOnInitialHeightMeasured);
    });
  }

} // namespace margelo::nitro::nitrotextinput
