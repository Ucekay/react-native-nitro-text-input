///
/// HybridNitroTextInputViewComponent.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <optional>
#include <NitroModules/NitroDefines.hpp>
#include <NitroModules/NitroHash.hpp>
#include <NitroModules/CachedProp.hpp>
#include <react/renderer/core/ConcreteComponentDescriptor.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/components/view/ConcreteViewShadowNode.h>
#include <react/renderer/components/view/ViewProps.h>

#include <optional>
#include "AutoCapitalize.hpp"
#include <optional>
#include "AutoComplete.hpp"
#include <optional>
#include <optional>
#include <optional>
#include <optional>
#include "ClearButtonMode.hpp"
#include <optional>
#include <optional>
#include <optional>
#include <string>
#include <optional>
#include <functional>
#include <optional>
#include <memory>
#include "HybridNitroTextInputViewSpec.hpp"
#include <functional>
#include <optional>

namespace margelo::nitro::nitrotextinput::views {

  using namespace facebook;

  /**
   * The name of the actual native View.
   */
  extern const char HybridNitroTextInputViewComponentName[];

  /**
   * Props for the "NitroTextInputView" View.
   */
  class HybridNitroTextInputViewProps final: public react::ViewProps {
  public:
    HybridNitroTextInputViewProps() = default;
    HybridNitroTextInputViewProps(const HybridNitroTextInputViewProps&);
    HybridNitroTextInputViewProps(const react::PropsParserContext& context,
                                  const HybridNitroTextInputViewProps& sourceProps,
                                  const react::RawProps& rawProps);

  public:
    CachedProp<std::optional<bool>> allowFontScaling;
    CachedProp<std::optional<AutoCapitalize>> autoCapitalize;
    CachedProp<std::optional<AutoComplete>> autoComplete;
    CachedProp<std::optional<bool>> autoCorrect;
    CachedProp<std::optional<bool>> autoFocus;
    CachedProp<std::optional<bool>> caretHidden;
    CachedProp<std::optional<ClearButtonMode>> clearButtonMode;
    CachedProp<std::optional<bool>> clearTextOnFocus;
    CachedProp<std::optional<bool>> multiline;
    CachedProp<std::optional<std::string>> placeholder;
    CachedProp<std::optional<std::function<void(double /* height */)>>> onInitialHeightMeasured;
    CachedProp<std::optional<std::function<void(const std::shared_ptr<HybridNitroTextInputViewSpec>& /* ref */)>>> hybridRef;

  private:
    static bool filterObjectKeys(const std::string& propName);
  };

  /**
   * State for the "NitroTextInputView" View.
   */
  class HybridNitroTextInputViewState final {
  public:
    HybridNitroTextInputViewState() = default;

  public:
    void setProps(const HybridNitroTextInputViewProps& props) { _props.emplace(props); }
    const std::optional<HybridNitroTextInputViewProps>& getProps() const { return _props; }

  public:
#ifdef ANDROID
  HybridNitroTextInputViewState(const HybridNitroTextInputViewState& /* previousState */, folly::dynamic /* data */) {}
  folly::dynamic getDynamic() const {
    throw std::runtime_error("HybridNitroTextInputViewState does not support folly!");
  }
  react::MapBuffer getMapBuffer() const {
    throw std::runtime_error("HybridNitroTextInputViewState does not support MapBuffer!");
  };
#endif

  private:
    std::optional<HybridNitroTextInputViewProps> _props;
  };

  /**
   * The Shadow Node for the "NitroTextInputView" View.
   */
  using HybridNitroTextInputViewShadowNode = react::ConcreteViewShadowNode<HybridNitroTextInputViewComponentName /* "HybridNitroTextInputView" */,
                                                                           HybridNitroTextInputViewProps /* custom props */,
                                                                           react::ViewEventEmitter /* default */,
                                                                           HybridNitroTextInputViewState /* custom state */>;

  /**
   * The Component Descriptor for the "NitroTextInputView" View.
   */
  class HybridNitroTextInputViewComponentDescriptor final: public react::ConcreteComponentDescriptor<HybridNitroTextInputViewShadowNode> {
  public:
    HybridNitroTextInputViewComponentDescriptor(const react::ComponentDescriptorParameters& parameters);

  public:
    /**
     * A faster path for cloning props - reuses the caching logic from `HybridNitroTextInputViewProps`.
     */
    std::shared_ptr<const react::Props> cloneProps(const react::PropsParserContext& context,
                                                   const std::shared_ptr<const react::Props>& props,
                                                   react::RawProps rawProps) const override;
#ifdef ANDROID
    void adopt(react::ShadowNode& shadowNode) const override;
#endif
  };

  /* The actual view for "NitroTextInputView" needs to be implemented in platform-specific code. */

} // namespace margelo::nitro::nitrotextinput::views
