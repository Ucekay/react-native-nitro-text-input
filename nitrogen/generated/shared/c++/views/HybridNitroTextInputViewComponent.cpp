///
/// HybridNitroTextInputViewComponent.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridNitroTextInputViewComponent.hpp"

#include <string>
#include <exception>
#include <utility>
#include <NitroModules/NitroDefines.hpp>
#include <NitroModules/JSIConverter.hpp>
#include <react/renderer/core/RawValue.h>
#include <react/renderer/core/ShadowNode.h>
#include <react/renderer/core/ComponentDescriptor.h>
#include <react/renderer/components/view/ViewProps.h>

namespace margelo::nitro::nitrotextinput::views {

  extern const char HybridNitroTextInputViewComponentName[] = "NitroTextInputView";

  HybridNitroTextInputViewProps::HybridNitroTextInputViewProps(const react::PropsParserContext& context,
                                                               const HybridNitroTextInputViewProps& sourceProps,
                                                               const react::RawProps& rawProps):
    react::ViewProps(context, sourceProps, rawProps, filterObjectKeys),
    allowFontScaling([&]() -> CachedProp<std::optional<bool>> {
      try {
        const react::RawValue* rawValue = rawProps.at("allowFontScaling", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.allowFontScaling;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<bool>>::fromRawValue(*runtime, value, sourceProps.allowFontScaling);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroTextInputView.allowFontScaling: ") + exc.what());
      }
    }()),
    autoCapitalize([&]() -> CachedProp<std::optional<AutoCapitalize>> {
      try {
        const react::RawValue* rawValue = rawProps.at("autoCapitalize", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.autoCapitalize;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<AutoCapitalize>>::fromRawValue(*runtime, value, sourceProps.autoCapitalize);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroTextInputView.autoCapitalize: ") + exc.what());
      }
    }()),
    autoComplete([&]() -> CachedProp<std::optional<AutoComplete>> {
      try {
        const react::RawValue* rawValue = rawProps.at("autoComplete", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.autoComplete;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<AutoComplete>>::fromRawValue(*runtime, value, sourceProps.autoComplete);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroTextInputView.autoComplete: ") + exc.what());
      }
    }()),
    autoCorrect([&]() -> CachedProp<std::optional<bool>> {
      try {
        const react::RawValue* rawValue = rawProps.at("autoCorrect", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.autoCorrect;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<bool>>::fromRawValue(*runtime, value, sourceProps.autoCorrect);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroTextInputView.autoCorrect: ") + exc.what());
      }
    }()),
    autoFocus([&]() -> CachedProp<std::optional<bool>> {
      try {
        const react::RawValue* rawValue = rawProps.at("autoFocus", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.autoFocus;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<bool>>::fromRawValue(*runtime, value, sourceProps.autoFocus);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroTextInputView.autoFocus: ") + exc.what());
      }
    }()),
    caretHidden([&]() -> CachedProp<std::optional<bool>> {
      try {
        const react::RawValue* rawValue = rawProps.at("caretHidden", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.caretHidden;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<bool>>::fromRawValue(*runtime, value, sourceProps.caretHidden);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroTextInputView.caretHidden: ") + exc.what());
      }
    }()),
    clearButtonMode([&]() -> CachedProp<std::optional<ClearButtonMode>> {
      try {
        const react::RawValue* rawValue = rawProps.at("clearButtonMode", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.clearButtonMode;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<ClearButtonMode>>::fromRawValue(*runtime, value, sourceProps.clearButtonMode);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroTextInputView.clearButtonMode: ") + exc.what());
      }
    }()),
    clearTextOnFocus([&]() -> CachedProp<std::optional<bool>> {
      try {
        const react::RawValue* rawValue = rawProps.at("clearTextOnFocus", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.clearTextOnFocus;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<bool>>::fromRawValue(*runtime, value, sourceProps.clearTextOnFocus);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroTextInputView.clearTextOnFocus: ") + exc.what());
      }
    }()),
    contextMenuHidden([&]() -> CachedProp<std::optional<bool>> {
      try {
        const react::RawValue* rawValue = rawProps.at("contextMenuHidden", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.contextMenuHidden;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<bool>>::fromRawValue(*runtime, value, sourceProps.contextMenuHidden);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroTextInputView.contextMenuHidden: ") + exc.what());
      }
    }()),
    defaultValue([&]() -> CachedProp<std::optional<std::string>> {
      try {
        const react::RawValue* rawValue = rawProps.at("defaultValue", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.defaultValue;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::string>>::fromRawValue(*runtime, value, sourceProps.defaultValue);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroTextInputView.defaultValue: ") + exc.what());
      }
    }()),
    editable([&]() -> CachedProp<std::optional<bool>> {
      try {
        const react::RawValue* rawValue = rawProps.at("editable", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.editable;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<bool>>::fromRawValue(*runtime, value, sourceProps.editable);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroTextInputView.editable: ") + exc.what());
      }
    }()),
    enablesReturnKeyAutomatically([&]() -> CachedProp<std::optional<bool>> {
      try {
        const react::RawValue* rawValue = rawProps.at("enablesReturnKeyAutomatically", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.enablesReturnKeyAutomatically;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<bool>>::fromRawValue(*runtime, value, sourceProps.enablesReturnKeyAutomatically);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroTextInputView.enablesReturnKeyAutomatically: ") + exc.what());
      }
    }()),
    enterKeyHint([&]() -> CachedProp<std::optional<EnterKeyHint>> {
      try {
        const react::RawValue* rawValue = rawProps.at("enterKeyHint", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.enterKeyHint;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<EnterKeyHint>>::fromRawValue(*runtime, value, sourceProps.enterKeyHint);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroTextInputView.enterKeyHint: ") + exc.what());
      }
    }()),
    keyboardType([&]() -> CachedProp<std::optional<KeyboardType>> {
      try {
        const react::RawValue* rawValue = rawProps.at("keyboardType", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.keyboardType;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<KeyboardType>>::fromRawValue(*runtime, value, sourceProps.keyboardType);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroTextInputView.keyboardType: ") + exc.what());
      }
    }()),
    maxFontSizeMultiplier([&]() -> CachedProp<std::optional<double>> {
      try {
        const react::RawValue* rawValue = rawProps.at("maxFontSizeMultiplier", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.maxFontSizeMultiplier;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<double>>::fromRawValue(*runtime, value, sourceProps.maxFontSizeMultiplier);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroTextInputView.maxFontSizeMultiplier: ") + exc.what());
      }
    }()),
    maxLength([&]() -> CachedProp<std::optional<double>> {
      try {
        const react::RawValue* rawValue = rawProps.at("maxLength", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.maxLength;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<double>>::fromRawValue(*runtime, value, sourceProps.maxLength);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroTextInputView.maxLength: ") + exc.what());
      }
    }()),
    multiline([&]() -> CachedProp<std::optional<bool>> {
      try {
        const react::RawValue* rawValue = rawProps.at("multiline", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.multiline;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<bool>>::fromRawValue(*runtime, value, sourceProps.multiline);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroTextInputView.multiline: ") + exc.what());
      }
    }()),
    placeholder([&]() -> CachedProp<std::optional<std::string>> {
      try {
        const react::RawValue* rawValue = rawProps.at("placeholder", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.placeholder;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::string>>::fromRawValue(*runtime, value, sourceProps.placeholder);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroTextInputView.placeholder: ") + exc.what());
      }
    }()),
    onTextChanged([&]() -> CachedProp<std::optional<std::function<void(const std::string& /* text */)>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("onTextChanged", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.onTextChanged;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void(const std::string& /* text */)>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.onTextChanged);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroTextInputView.onTextChanged: ") + exc.what());
      }
    }()),
    onBlurred([&]() -> CachedProp<std::optional<std::function<void()>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("onBlurred", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.onBlurred;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void()>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.onBlurred);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroTextInputView.onBlurred: ") + exc.what());
      }
    }()),
    onInitialHeightMeasured([&]() -> CachedProp<std::optional<std::function<void(double /* height */)>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("onInitialHeightMeasured", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.onInitialHeightMeasured;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void(double /* height */)>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.onInitialHeightMeasured);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroTextInputView.onInitialHeightMeasured: ") + exc.what());
      }
    }()),
    hybridRef([&]() -> CachedProp<std::optional<std::function<void(const std::shared_ptr<HybridNitroTextInputViewSpec>& /* ref */)>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("hybridRef", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.hybridRef;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void(const std::shared_ptr<HybridNitroTextInputViewSpec>& /* ref */)>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.hybridRef);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroTextInputView.hybridRef: ") + exc.what());
      }
    }()) { }

  HybridNitroTextInputViewProps::HybridNitroTextInputViewProps(const HybridNitroTextInputViewProps& other):
    react::ViewProps(),
    allowFontScaling(other.allowFontScaling),
    autoCapitalize(other.autoCapitalize),
    autoComplete(other.autoComplete),
    autoCorrect(other.autoCorrect),
    autoFocus(other.autoFocus),
    caretHidden(other.caretHidden),
    clearButtonMode(other.clearButtonMode),
    clearTextOnFocus(other.clearTextOnFocus),
    contextMenuHidden(other.contextMenuHidden),
    defaultValue(other.defaultValue),
    editable(other.editable),
    enablesReturnKeyAutomatically(other.enablesReturnKeyAutomatically),
    enterKeyHint(other.enterKeyHint),
    keyboardType(other.keyboardType),
    maxFontSizeMultiplier(other.maxFontSizeMultiplier),
    maxLength(other.maxLength),
    multiline(other.multiline),
    placeholder(other.placeholder),
    onTextChanged(other.onTextChanged),
    onBlurred(other.onBlurred),
    onInitialHeightMeasured(other.onInitialHeightMeasured),
    hybridRef(other.hybridRef) { }

  bool HybridNitroTextInputViewProps::filterObjectKeys(const std::string& propName) {
    switch (hashString(propName)) {
      case hashString("allowFontScaling"): return true;
      case hashString("autoCapitalize"): return true;
      case hashString("autoComplete"): return true;
      case hashString("autoCorrect"): return true;
      case hashString("autoFocus"): return true;
      case hashString("caretHidden"): return true;
      case hashString("clearButtonMode"): return true;
      case hashString("clearTextOnFocus"): return true;
      case hashString("contextMenuHidden"): return true;
      case hashString("defaultValue"): return true;
      case hashString("editable"): return true;
      case hashString("enablesReturnKeyAutomatically"): return true;
      case hashString("enterKeyHint"): return true;
      case hashString("keyboardType"): return true;
      case hashString("maxFontSizeMultiplier"): return true;
      case hashString("maxLength"): return true;
      case hashString("multiline"): return true;
      case hashString("placeholder"): return true;
      case hashString("onTextChanged"): return true;
      case hashString("onBlurred"): return true;
      case hashString("onInitialHeightMeasured"): return true;
      case hashString("hybridRef"): return true;
      default: return false;
    }
  }

  HybridNitroTextInputViewComponentDescriptor::HybridNitroTextInputViewComponentDescriptor(const react::ComponentDescriptorParameters& parameters)
    : ConcreteComponentDescriptor(parameters,
                                  react::RawPropsParser(/* enableJsiParser */ true)) {}

  std::shared_ptr<const react::Props> HybridNitroTextInputViewComponentDescriptor::cloneProps(const react::PropsParserContext& context,
                                                                                              const std::shared_ptr<const react::Props>& props,
                                                                                              react::RawProps rawProps) const {
    // 1. Prepare raw props parser
    rawProps.parse(rawPropsParser_);
    // 2. Copy props with Nitro's cached copy constructor
    return HybridNitroTextInputViewShadowNode::Props(context, /* & */ rawProps, props);
  }

#ifdef ANDROID
  void HybridNitroTextInputViewComponentDescriptor::adopt(react::ShadowNode& shadowNode) const {
    // This is called immediately after `ShadowNode` is created, cloned or in progress.
    // On Android, we need to wrap props in our state, which gets routed through Java and later unwrapped in JNI/C++.
    auto& concreteShadowNode = dynamic_cast<HybridNitroTextInputViewShadowNode&>(shadowNode);
    const HybridNitroTextInputViewProps& props = concreteShadowNode.getConcreteProps();
    HybridNitroTextInputViewState state;
    state.setProps(props);
    concreteShadowNode.setStateData(std::move(state));
  }
#endif

} // namespace margelo::nitro::nitrotextinput::views
