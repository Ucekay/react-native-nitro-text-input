///
/// HybridNitroTextInputViewSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <NitroModules/JHybridObject.hpp>
#include <fbjni/fbjni.h>
#include "HybridNitroTextInputViewSpec.hpp"




namespace margelo::nitro::nitrotextinput {

  using namespace facebook;

  class JHybridNitroTextInputViewSpec: public jni::HybridClass<JHybridNitroTextInputViewSpec, JHybridObject>,
                                       public virtual HybridNitroTextInputViewSpec {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrotextinput/HybridNitroTextInputViewSpec;";
    static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
    static void registerNatives();

  protected:
    // C++ constructor (called from Java via `initHybrid()`)
    explicit JHybridNitroTextInputViewSpec(jni::alias_ref<jhybridobject> jThis) :
      HybridObject(HybridNitroTextInputViewSpec::TAG),
      HybridBase(jThis),
      _javaPart(jni::make_global(jThis)) {}

  public:
    ~JHybridNitroTextInputViewSpec() override {
      // Hermes GC can destroy JS objects on a non-JNI Thread.
      jni::ThreadScope::WithClassLoader([&] { _javaPart.reset(); });
    }

  public:
    size_t getExternalMemorySize() noexcept override;
    void dispose() noexcept override;

  public:
    inline const jni::global_ref<JHybridNitroTextInputViewSpec::javaobject>& getJavaPart() const noexcept {
      return _javaPart;
    }

  public:
    // Properties
    std::optional<bool> getAllowFontScaling() override;
    void setAllowFontScaling(std::optional<bool> allowFontScaling) override;
    std::optional<AutoCapitalize> getAutoCapitalize() override;
    void setAutoCapitalize(std::optional<AutoCapitalize> autoCapitalize) override;
    std::optional<AutoComplete> getAutoComplete() override;
    void setAutoComplete(std::optional<AutoComplete> autoComplete) override;
    std::optional<bool> getAutoCorrect() override;
    void setAutoCorrect(std::optional<bool> autoCorrect) override;
    std::optional<bool> getAutoFocus() override;
    void setAutoFocus(std::optional<bool> autoFocus) override;
    std::optional<bool> getMultiline() override;
    void setMultiline(std::optional<bool> multiline) override;
    std::optional<std::string> getPlaceholder() override;
    void setPlaceholder(const std::optional<std::string>& placeholder) override;
    std::optional<std::function<void(double /* height */)>> getOnInitialHeightMeasured() override;
    void setOnInitialHeightMeasured(const std::optional<std::function<void(double /* height */)>>& onInitialHeightMeasured) override;

  public:
    // Methods
    

  private:
    friend HybridBase;
    using HybridBase::HybridBase;
    jni::global_ref<JHybridNitroTextInputViewSpec::javaobject> _javaPart;
  };

} // namespace margelo::nitro::nitrotextinput
