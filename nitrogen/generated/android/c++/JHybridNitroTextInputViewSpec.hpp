///
/// HybridNitroTextInputViewSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <NitroModules/JHybridObject.hpp>
#include <fbjni/fbjni.h>
#include "HybridNitroTextInputViewSpec.hpp"




namespace margelo::nitro::nitrotextinput {

  using namespace facebook;

  class JHybridNitroTextInputViewSpec: public jni::HybridClass<JHybridNitroTextInputViewSpec, JHybridObject>,
                                       public virtual HybridNitroTextInputViewSpec {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrotextinput/HybridNitroTextInputViewSpec;";
    static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
    static void registerNatives();

  protected:
    // C++ constructor (called from Java via `initHybrid()`)
    explicit JHybridNitroTextInputViewSpec(jni::alias_ref<jhybridobject> jThis) :
      HybridObject(HybridNitroTextInputViewSpec::TAG),
      HybridBase(jThis),
      _javaPart(jni::make_global(jThis)) {}

  public:
    ~JHybridNitroTextInputViewSpec() override {
      // Hermes GC can destroy JS objects on a non-JNI Thread.
      jni::ThreadScope::WithClassLoader([&] { _javaPart.reset(); });
    }

  public:
    size_t getExternalMemorySize() noexcept override;
    void dispose() noexcept override;

  public:
    inline const jni::global_ref<JHybridNitroTextInputViewSpec::javaobject>& getJavaPart() const noexcept {
      return _javaPart;
    }

  public:
    // Properties
    std::optional<bool> getAllowFontScaling() override;
    void setAllowFontScaling(std::optional<bool> allowFontScaling) override;
    std::optional<AutoCapitalize> getAutoCapitalize() override;
    void setAutoCapitalize(std::optional<AutoCapitalize> autoCapitalize) override;
    std::optional<AutoComplete> getAutoComplete() override;
    void setAutoComplete(std::optional<AutoComplete> autoComplete) override;
    std::optional<bool> getAutoCorrect() override;
    void setAutoCorrect(std::optional<bool> autoCorrect) override;
    std::optional<bool> getAutoFocus() override;
    void setAutoFocus(std::optional<bool> autoFocus) override;
    std::optional<bool> getCaretHidden() override;
    void setCaretHidden(std::optional<bool> caretHidden) override;
    std::optional<ClearButtonMode> getClearButtonMode() override;
    void setClearButtonMode(std::optional<ClearButtonMode> clearButtonMode) override;
    std::optional<bool> getClearTextOnFocus() override;
    void setClearTextOnFocus(std::optional<bool> clearTextOnFocus) override;
    std::optional<bool> getContextMenuHidden() override;
    void setContextMenuHidden(std::optional<bool> contextMenuHidden) override;
    std::optional<std::string> getDefaultValue() override;
    void setDefaultValue(const std::optional<std::string>& defaultValue) override;
    std::optional<bool> getEditable() override;
    void setEditable(std::optional<bool> editable) override;
    std::optional<bool> getEnablesReturnKeyAutomatically() override;
    void setEnablesReturnKeyAutomatically(std::optional<bool> enablesReturnKeyAutomatically) override;
    std::optional<KeyboardType> getKeyboardType() override;
    void setKeyboardType(std::optional<KeyboardType> keyboardType) override;
    std::optional<KeyboardAppearance> getKeyboardAppearance() override;
    void setKeyboardAppearance(std::optional<KeyboardAppearance> keyboardAppearance) override;
    std::optional<double> getMaxFontSizeMultiplier() override;
    void setMaxFontSizeMultiplier(std::optional<double> maxFontSizeMultiplier) override;
    std::optional<double> getMaxLength() override;
    void setMaxLength(std::optional<double> maxLength) override;
    std::optional<bool> getMultiline() override;
    void setMultiline(std::optional<bool> multiline) override;
    std::optional<std::string> getPasswordRules() override;
    void setPasswordRules(const std::optional<std::string>& passwordRules) override;
    std::optional<std::string> getPlaceholder() override;
    void setPlaceholder(const std::optional<std::string>& placeholder) override;
    std::optional<TextAlign> getTextAlign() override;
    void setTextAlign(std::optional<TextAlign> textAlign) override;
    std::optional<std::variant<std::string, double>> getPlaceholderTextColor() override;
    void setPlaceholderTextColor(const std::optional<std::variant<std::string, double>>& placeholderTextColor) override;
    std::optional<ReturnKeyType> getReturnKeyType() override;
    void setReturnKeyType(std::optional<ReturnKeyType> returnKeyType) override;
    std::optional<TextSelection> getSelection() override;
    void setSelection(const std::optional<TextSelection>& selection) override;
    std::optional<std::variant<std::string, double>> getSelectionColor() override;
    void setSelectionColor(const std::optional<std::variant<std::string, double>>& selectionColor) override;
    std::optional<bool> getSecureTextEntry() override;
    void setSecureTextEntry(std::optional<bool> secureTextEntry) override;
    std::optional<bool> getSpellCheck() override;
    void setSpellCheck(std::optional<bool> spellCheck) override;
    std::optional<bool> getSelectTextOnFocus() override;
    void setSelectTextOnFocus(std::optional<bool> selectTextOnFocus) override;
    std::optional<bool> getShowSoftInputOnFocus() override;
    void setShowSoftInputOnFocus(std::optional<bool> showSoftInputOnFocus) override;
    std::optional<bool> getSmartInsertDelete() override;
    void setSmartInsertDelete(std::optional<bool> smartInsertDelete) override;
    std::optional<SubmitBehavior> getSubmitBehavior() override;
    void setSubmitBehavior(std::optional<SubmitBehavior> submitBehavior) override;
    std::optional<std::function<void()>> getOnFocused() override;
    void setOnFocused(const std::optional<std::function<void()>>& onFocused) override;
    std::optional<std::function<void()>> getOnBlurred() override;
    void setOnBlurred(const std::optional<std::function<void()>>& onBlurred) override;
    std::optional<std::function<void(const std::string& /* text */)>> getOnTextChanged() override;
    void setOnTextChanged(const std::optional<std::function<void(const std::string& /* text */)>>& onTextChanged) override;
    std::optional<std::function<void(const std::string& /* text */)>> getOnEditingEnded() override;
    void setOnEditingEnded(const std::optional<std::function<void(const std::string& /* text */)>>& onEditingEnded) override;
    std::optional<std::function<void(const std::string& /* text */)>> getOnEditingSubmitted() override;
    void setOnEditingSubmitted(const std::optional<std::function<void(const std::string& /* text */)>>& onEditingSubmitted) override;
    std::optional<std::function<void(double /* start */, double /* end */)>> getOnSelectionChanged() override;
    void setOnSelectionChanged(const std::optional<std::function<void(double /* start */, double /* end */)>>& onSelectionChanged) override;
    std::optional<std::function<void(const std::string& /* key */)>> getOnKeyPressed() override;
    void setOnKeyPressed(const std::optional<std::function<void(const std::string& /* key */)>>& onKeyPressed) override;
    std::optional<std::function<void(double /* pageX */, double /* pageY */, double /* locationX */, double /* locationY */, double /* timestamp */)>> getOnTouchBegan() override;
    void setOnTouchBegan(const std::optional<std::function<void(double /* pageX */, double /* pageY */, double /* locationX */, double /* locationY */, double /* timestamp */)>>& onTouchBegan) override;
    std::optional<std::function<void(double /* pageX */, double /* pageY */, double /* locationX */, double /* locationY */, double /* timestamp */)>> getOnTouchEnded() override;
    void setOnTouchEnded(const std::optional<std::function<void(double /* pageX */, double /* pageY */, double /* locationX */, double /* locationY */, double /* timestamp */)>>& onTouchEnded) override;
    std::optional<std::function<void(double /* height */)>> getOnInitialHeightMeasured() override;
    void setOnInitialHeightMeasured(const std::optional<std::function<void(double /* height */)>>& onInitialHeightMeasured) override;

  public:
    // Methods
    void focus() override;
    void blur() override;
    void clear() override;
    bool isFocused() override;

  private:
    friend HybridBase;
    using HybridBase::HybridBase;
    jni::global_ref<JHybridNitroTextInputViewSpec::javaobject> _javaPart;
  };

} // namespace margelo::nitro::nitrotextinput
