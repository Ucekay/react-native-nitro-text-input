///
/// JHybridNitroTextInputViewSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroTextInputViewSpec.hpp"

// Forward declaration of `AutoCapitalize` to properly resolve imports.
namespace margelo::nitro::nitrotextinput { enum class AutoCapitalize; }
// Forward declaration of `AutoComplete` to properly resolve imports.
namespace margelo::nitro::nitrotextinput { enum class AutoComplete; }
// Forward declaration of `ClearButtonMode` to properly resolve imports.
namespace margelo::nitro::nitrotextinput { enum class ClearButtonMode; }

#include <optional>
#include "AutoCapitalize.hpp"
#include "JAutoCapitalize.hpp"
#include "AutoComplete.hpp"
#include "JAutoComplete.hpp"
#include "ClearButtonMode.hpp"
#include "JClearButtonMode.hpp"
#include <string>
#include <functional>
#include "JFunc_void_double.hpp"

namespace margelo::nitro::nitrotextinput {

  jni::local_ref<JHybridNitroTextInputViewSpec::jhybriddata> JHybridNitroTextInputViewSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNitroTextInputViewSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNitroTextInputViewSpec::initHybrid),
    });
  }

  size_t JHybridNitroTextInputViewSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridNitroTextInputViewSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  std::optional<bool> JHybridNitroTextInputViewSpec::getAllowFontScaling() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JBoolean>()>("getAllowFontScaling");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(static_cast<bool>(__result->value())) : std::nullopt;
  }
  void JHybridNitroTextInputViewSpec::setAllowFontScaling(std::optional<bool> allowFontScaling) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JBoolean> /* allowFontScaling */)>("setAllowFontScaling");
    method(_javaPart, allowFontScaling.has_value() ? jni::JBoolean::valueOf(allowFontScaling.value()) : nullptr);
  }
  std::optional<AutoCapitalize> JHybridNitroTextInputViewSpec::getAutoCapitalize() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JAutoCapitalize>()>("getAutoCapitalize");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toCpp()) : std::nullopt;
  }
  void JHybridNitroTextInputViewSpec::setAutoCapitalize(std::optional<AutoCapitalize> autoCapitalize) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JAutoCapitalize> /* autoCapitalize */)>("setAutoCapitalize");
    method(_javaPart, autoCapitalize.has_value() ? JAutoCapitalize::fromCpp(autoCapitalize.value()) : nullptr);
  }
  std::optional<AutoComplete> JHybridNitroTextInputViewSpec::getAutoComplete() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JAutoComplete>()>("getAutoComplete");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toCpp()) : std::nullopt;
  }
  void JHybridNitroTextInputViewSpec::setAutoComplete(std::optional<AutoComplete> autoComplete) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JAutoComplete> /* autoComplete */)>("setAutoComplete");
    method(_javaPart, autoComplete.has_value() ? JAutoComplete::fromCpp(autoComplete.value()) : nullptr);
  }
  std::optional<bool> JHybridNitroTextInputViewSpec::getAutoCorrect() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JBoolean>()>("getAutoCorrect");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(static_cast<bool>(__result->value())) : std::nullopt;
  }
  void JHybridNitroTextInputViewSpec::setAutoCorrect(std::optional<bool> autoCorrect) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JBoolean> /* autoCorrect */)>("setAutoCorrect");
    method(_javaPart, autoCorrect.has_value() ? jni::JBoolean::valueOf(autoCorrect.value()) : nullptr);
  }
  std::optional<bool> JHybridNitroTextInputViewSpec::getAutoFocus() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JBoolean>()>("getAutoFocus");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(static_cast<bool>(__result->value())) : std::nullopt;
  }
  void JHybridNitroTextInputViewSpec::setAutoFocus(std::optional<bool> autoFocus) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JBoolean> /* autoFocus */)>("setAutoFocus");
    method(_javaPart, autoFocus.has_value() ? jni::JBoolean::valueOf(autoFocus.value()) : nullptr);
  }
  std::optional<bool> JHybridNitroTextInputViewSpec::getCaretHidden() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JBoolean>()>("getCaretHidden");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(static_cast<bool>(__result->value())) : std::nullopt;
  }
  void JHybridNitroTextInputViewSpec::setCaretHidden(std::optional<bool> caretHidden) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JBoolean> /* caretHidden */)>("setCaretHidden");
    method(_javaPart, caretHidden.has_value() ? jni::JBoolean::valueOf(caretHidden.value()) : nullptr);
  }
  std::optional<ClearButtonMode> JHybridNitroTextInputViewSpec::getClearButtonMode() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JClearButtonMode>()>("getClearButtonMode");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toCpp()) : std::nullopt;
  }
  void JHybridNitroTextInputViewSpec::setClearButtonMode(std::optional<ClearButtonMode> clearButtonMode) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JClearButtonMode> /* clearButtonMode */)>("setClearButtonMode");
    method(_javaPart, clearButtonMode.has_value() ? JClearButtonMode::fromCpp(clearButtonMode.value()) : nullptr);
  }
  std::optional<bool> JHybridNitroTextInputViewSpec::getClearTextOnFocus() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JBoolean>()>("getClearTextOnFocus");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(static_cast<bool>(__result->value())) : std::nullopt;
  }
  void JHybridNitroTextInputViewSpec::setClearTextOnFocus(std::optional<bool> clearTextOnFocus) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JBoolean> /* clearTextOnFocus */)>("setClearTextOnFocus");
    method(_javaPart, clearTextOnFocus.has_value() ? jni::JBoolean::valueOf(clearTextOnFocus.value()) : nullptr);
  }
  std::optional<bool> JHybridNitroTextInputViewSpec::getContextMenuHidden() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JBoolean>()>("getContextMenuHidden");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(static_cast<bool>(__result->value())) : std::nullopt;
  }
  void JHybridNitroTextInputViewSpec::setContextMenuHidden(std::optional<bool> contextMenuHidden) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JBoolean> /* contextMenuHidden */)>("setContextMenuHidden");
    method(_javaPart, contextMenuHidden.has_value() ? jni::JBoolean::valueOf(contextMenuHidden.value()) : nullptr);
  }
  std::optional<std::string> JHybridNitroTextInputViewSpec::getDefaultValue() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getDefaultValue");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toStdString()) : std::nullopt;
  }
  void JHybridNitroTextInputViewSpec::setDefaultValue(const std::optional<std::string>& defaultValue) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JString> /* defaultValue */)>("setDefaultValue");
    method(_javaPart, defaultValue.has_value() ? jni::make_jstring(defaultValue.value()) : nullptr);
  }
  std::optional<bool> JHybridNitroTextInputViewSpec::getMultiline() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JBoolean>()>("getMultiline");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(static_cast<bool>(__result->value())) : std::nullopt;
  }
  void JHybridNitroTextInputViewSpec::setMultiline(std::optional<bool> multiline) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JBoolean> /* multiline */)>("setMultiline");
    method(_javaPart, multiline.has_value() ? jni::JBoolean::valueOf(multiline.value()) : nullptr);
  }
  std::optional<std::string> JHybridNitroTextInputViewSpec::getPlaceholder() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getPlaceholder");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toStdString()) : std::nullopt;
  }
  void JHybridNitroTextInputViewSpec::setPlaceholder(const std::optional<std::string>& placeholder) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JString> /* placeholder */)>("setPlaceholder");
    method(_javaPart, placeholder.has_value() ? jni::make_jstring(placeholder.value()) : nullptr);
  }
  std::optional<std::function<void(double /* height */)>> JHybridNitroTextInputViewSpec::getOnInitialHeightMeasured() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JFunc_void_double::javaobject>()>("getOnInitialHeightMeasured_cxx");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional([&]() -> std::function<void(double /* height */)> {
      if (__result->isInstanceOf(JFunc_void_double_cxx::javaClassStatic())) [[likely]] {
        auto downcast = jni::static_ref_cast<JFunc_void_double_cxx::javaobject>(__result);
        return downcast->cthis()->getFunction();
      } else {
        auto __resultRef = jni::make_global(__result);
        return [__resultRef](double height) -> void {
          return __resultRef->invoke(height);
        };
      }
    }()) : std::nullopt;
  }
  void JHybridNitroTextInputViewSpec::setOnInitialHeightMeasured(const std::optional<std::function<void(double /* height */)>>& onInitialHeightMeasured) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JFunc_void_double::javaobject> /* onInitialHeightMeasured */)>("setOnInitialHeightMeasured_cxx");
    method(_javaPart, onInitialHeightMeasured.has_value() ? JFunc_void_double_cxx::fromCpp(onInitialHeightMeasured.value()) : nullptr);
  }

  // Methods
  

} // namespace margelo::nitro::nitrotextinput
