///
/// JHybridNitroTextInputViewSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroTextInputViewSpec.hpp"



#include <string>
#include <optional>
#include <functional>
#include "JFunc_void_double.hpp"

namespace margelo::nitro::nitrotextinput {

  jni::local_ref<JHybridNitroTextInputViewSpec::jhybriddata> JHybridNitroTextInputViewSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNitroTextInputViewSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNitroTextInputViewSpec::initHybrid),
    });
  }

  size_t JHybridNitroTextInputViewSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridNitroTextInputViewSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  bool JHybridNitroTextInputViewSpec::getAutoCorrect() {
    static const auto method = javaClassStatic()->getMethod<jboolean()>("getAutoCorrect");
    auto __result = method(_javaPart);
    return static_cast<bool>(__result);
  }
  void JHybridNitroTextInputViewSpec::setAutoCorrect(bool autoCorrect) {
    static const auto method = javaClassStatic()->getMethod<void(jboolean /* autoCorrect */)>("setAutoCorrect");
    method(_javaPart, autoCorrect);
  }
  std::optional<std::string> JHybridNitroTextInputViewSpec::getPlaceholder() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getPlaceholder");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toStdString()) : std::nullopt;
  }
  void JHybridNitroTextInputViewSpec::setPlaceholder(const std::optional<std::string>& placeholder) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JString> /* placeholder */)>("setPlaceholder");
    method(_javaPart, placeholder.has_value() ? jni::make_jstring(placeholder.value()) : nullptr);
  }
  std::optional<std::function<void(double /* height */)>> JHybridNitroTextInputViewSpec::getOnInitialHeightMeasured() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JFunc_void_double::javaobject>()>("getOnInitialHeightMeasured_cxx");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional([&]() -> std::function<void(double /* height */)> {
      if (__result->isInstanceOf(JFunc_void_double_cxx::javaClassStatic())) [[likely]] {
        auto downcast = jni::static_ref_cast<JFunc_void_double_cxx::javaobject>(__result);
        return downcast->cthis()->getFunction();
      } else {
        auto __resultRef = jni::make_global(__result);
        return [__resultRef](double height) -> void {
          return __resultRef->invoke(height);
        };
      }
    }()) : std::nullopt;
  }
  void JHybridNitroTextInputViewSpec::setOnInitialHeightMeasured(const std::optional<std::function<void(double /* height */)>>& onInitialHeightMeasured) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JFunc_void_double::javaobject> /* onInitialHeightMeasured */)>("setOnInitialHeightMeasured_cxx");
    method(_javaPart, onInitialHeightMeasured.has_value() ? JFunc_void_double_cxx::fromCpp(onInitialHeightMeasured.value()) : nullptr);
  }

  // Methods
  

} // namespace margelo::nitro::nitrotextinput
