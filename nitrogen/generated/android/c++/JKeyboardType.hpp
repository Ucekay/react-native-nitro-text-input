///
/// JKeyboardType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "KeyboardType.hpp"

namespace margelo::nitro::nitrotextinput {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "KeyboardType" and the the Kotlin enum "KeyboardType".
   */
  struct JKeyboardType final: public jni::JavaClass<JKeyboardType> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrotextinput/KeyboardType;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum KeyboardType.
     */
    [[maybe_unused]]
    [[nodiscard]]
    KeyboardType toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("value");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<KeyboardType>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JKeyboardType> fromCpp(KeyboardType value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldURL = clazz->getStaticField<JKeyboardType>("URL");
      static const auto fieldEMAIL_ADDRESS = clazz->getStaticField<JKeyboardType>("EMAIL_ADDRESS");
      static const auto fieldDEFAULT = clazz->getStaticField<JKeyboardType>("DEFAULT");
      static const auto fieldASCII_CAPABLE = clazz->getStaticField<JKeyboardType>("ASCII_CAPABLE");
      static const auto fieldNUMBERS_AND_PUNCTUATION = clazz->getStaticField<JKeyboardType>("NUMBERS_AND_PUNCTUATION");
      static const auto fieldNUMBER_PAD = clazz->getStaticField<JKeyboardType>("NUMBER_PAD");
      static const auto fieldPHONE_PAD = clazz->getStaticField<JKeyboardType>("PHONE_PAD");
      static const auto fieldNAME_PHONE_PAD = clazz->getStaticField<JKeyboardType>("NAME_PHONE_PAD");
      static const auto fieldDECIMAL_PAD = clazz->getStaticField<JKeyboardType>("DECIMAL_PAD");
      static const auto fieldTWITTER = clazz->getStaticField<JKeyboardType>("TWITTER");
      static const auto fieldWEB_SEARCH = clazz->getStaticField<JKeyboardType>("WEB_SEARCH");
      static const auto fieldASCII_CAPABLE_NUMBER_PAD = clazz->getStaticField<JKeyboardType>("ASCII_CAPABLE_NUMBER_PAD");
      
      switch (value) {
        case KeyboardType::URL:
          return clazz->getStaticFieldValue(fieldURL);
        case KeyboardType::EMAIL_ADDRESS:
          return clazz->getStaticFieldValue(fieldEMAIL_ADDRESS);
        case KeyboardType::DEFAULT:
          return clazz->getStaticFieldValue(fieldDEFAULT);
        case KeyboardType::ASCII_CAPABLE:
          return clazz->getStaticFieldValue(fieldASCII_CAPABLE);
        case KeyboardType::NUMBERS_AND_PUNCTUATION:
          return clazz->getStaticFieldValue(fieldNUMBERS_AND_PUNCTUATION);
        case KeyboardType::NUMBER_PAD:
          return clazz->getStaticFieldValue(fieldNUMBER_PAD);
        case KeyboardType::PHONE_PAD:
          return clazz->getStaticFieldValue(fieldPHONE_PAD);
        case KeyboardType::NAME_PHONE_PAD:
          return clazz->getStaticFieldValue(fieldNAME_PHONE_PAD);
        case KeyboardType::DECIMAL_PAD:
          return clazz->getStaticFieldValue(fieldDECIMAL_PAD);
        case KeyboardType::TWITTER:
          return clazz->getStaticFieldValue(fieldTWITTER);
        case KeyboardType::WEB_SEARCH:
          return clazz->getStaticFieldValue(fieldWEB_SEARCH);
        case KeyboardType::ASCII_CAPABLE_NUMBER_PAD:
          return clazz->getStaticFieldValue(fieldASCII_CAPABLE_NUMBER_PAD);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::nitrotextinput
