///
/// JClearButtonMode.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "ClearButtonMode.hpp"

namespace margelo::nitro::nitrotextinput {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "ClearButtonMode" and the the Kotlin enum "ClearButtonMode".
   */
  struct JClearButtonMode final: public jni::JavaClass<JClearButtonMode> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrotextinput/ClearButtonMode;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum ClearButtonMode.
     */
    [[maybe_unused]]
    [[nodiscard]]
    ClearButtonMode toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("value");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<ClearButtonMode>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JClearButtonMode> fromCpp(ClearButtonMode value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldNEVER = clazz->getStaticField<JClearButtonMode>("NEVER");
      static const auto fieldWHILE_EDITING = clazz->getStaticField<JClearButtonMode>("WHILE_EDITING");
      static const auto fieldUNLESS_EDITING = clazz->getStaticField<JClearButtonMode>("UNLESS_EDITING");
      static const auto fieldALWAYS = clazz->getStaticField<JClearButtonMode>("ALWAYS");
      
      switch (value) {
        case ClearButtonMode::NEVER:
          return clazz->getStaticFieldValue(fieldNEVER);
        case ClearButtonMode::WHILE_EDITING:
          return clazz->getStaticFieldValue(fieldWHILE_EDITING);
        case ClearButtonMode::UNLESS_EDITING:
          return clazz->getStaticFieldValue(fieldUNLESS_EDITING);
        case ClearButtonMode::ALWAYS:
          return clazz->getStaticFieldValue(fieldALWAYS);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::nitrotextinput
