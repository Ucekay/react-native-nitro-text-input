---
alwaysApply: true
description: 'Implementation priority and progress tracking'
---

# 実装優先度と進捗管理

## 優先度順位

### 高優先度（Phase 1）

1. **onFocus** - 基本的なフォーカス処理
   - 最も基本的なイベント
   - 他の機能の基礎となる
   - 実装難易度：低

2. **onSubmitEditing** - 入力確定処理
   - フォーム入力の基本機能
   - ユーザーエクスペリエンスに直結
   - 実装難易度：中

### 中優先度（Phase 2）

3. **onSelectionChange** - 選択範囲変更
   - テキスト操作の基本機能
   - 実装難易度：中

4. **onKeyPress** - キー入力イベント
   - 高度な入力制御
   - 実装難易度：高

## 進捗管理

### 実装ステータス定義

- 🔄 **調査中**: `@react-native/` の実装確認中
- 📝 **仕様書作成中**: 仕様書を作成中
- 🚧 **実装中**: UIKitでの実装中
- 🧪 **テスト中**: テスト実施中
- ✅ **完了**: PR作成済み

### 現在のステータス

| 機能              | ステータス | ブランチ                 | 担当 | 備考          |
| ----------------- | ---------- | ------------------------ | ---- | ------------- |
| onFocus           | 🔄 調査中  | feat/on-focus            | -    | 調査開始予定  |
| onKeyPress        | 🔄 未着手  | feat/on-keypress         | -    | onFocus完了後 |
| onSelectionChange | 🔄 未着手  | feat/on-selection-change | -    | onFocus完了後 |
| onSubmitEditing   | 🔄 未着手  | feat/on-submit-editing   | -    | onFocus完了後 |

## ブランチ戦略

### ブランチ命名規則

- 機能ブランチ：`feat/{機能名-キャメルケース}`
- 例：`feat/onFocus`, `feat/onKeyPress`

### マージ戦略

- 各機能ブランチを `next` にマージ
- コンフリクト発生時の解決手順を定義
- レビュープロセスの遵守

## 品質基準

### 実装チェックリスト

- [ ] `@react-native/` との完全な互換性
- [ ] 適切なエラーハンドリング
- [ ] パフォーマンス影響の最小化
- [ ] テストカバレッジの確保
- [ ] ドキュメントの更新

### レビュー基準

- [ ] コードスタイルの遵守
- [ ] テストの通過
- [ ] パフォーマンス影響の確認
- [ ] セキュリティの考慮
- [ ] 保守性の確保

## リスク管理

### 潜在的リスク

1. **実装の複雑さ**: UIKitでの完全な再現が困難な場合
2. **パフォーマンス**: イベント処理によるパフォーマンス影響
3. **互換性**: `@react-native/` との挙動差異

### リスク対策

1. **段階的実装**: シンプルな機能から開始
2. **継続的テスト**: 各段階での動作確認
3. **ドキュメント整備**: 仕様の明確化
